[{"categories":["Git"],"content":"Common Git Commands 使用說明","date":"2021-08-01","objectID":"/git_command/","tags":["git","tool"],"title":"Git Commands","uri":"/git_command/"},{"categories":["Git"],"content":"git init This command creates an empty Git repository.\r\r 初始化 git # cd the target folder git init 也可以指定資料夾使用 git init \u003cdirectory\u003e \r\r ","date":"2021-08-01","objectID":"/git_command/:1:0","tags":["git","tool"],"title":"Git Commands","uri":"/git_command/"},{"categories":["Git"],"content":"git clone Clone a repository into a new directory\r\r 複製一個Repository(倉儲) # ssh git clone git@github.com:test/test.git # https git clone https://github.com/test/test.git 加速 (只取最近1筆的history commit) git clone git@github.com:test/test.git --depth 1 # equal to git clone git@github.com:test/test.git --depth 1 --single-branch # 使用 --depth 相當於是 --single-branch，會無法切換 remote branch # [solution]: --no-signle-branch # 每個 branch 的最新一筆 history commit 都會取下來 git clone git@github.com:test/test.git --depth 1 --no-single-branch \r\r ","date":"2021-08-01","objectID":"/git_command/:2:0","tags":["git","tool"],"title":"Git Commands","uri":"/git_command/"},{"categories":["Git"],"content":"git add Add file contents to the index\r\r 將檔案放到Stage(暫存區) git add \u003cfilename\u003e git add . # stages new files and modifications, without deletions git add -u # stages modifications and deletions, without new files (-u == --update) git add -A # stages both additions and removals (-A == --all) # in detail, 'git add -A' is equivalent to 'git add .; git add -u' 若有需要取消 add git reset HEAD \u003cfile\u003e 新增檔案部分的內容 # Interactively choose hunks of patch between the index and the work tree and add them to the index. git add -p # equal to `git add --patch` Stage this hunk [y,n,q,a,d,/,s,e,?] y - stage this hunk n - do not stage this hunk q - quit; do not stage this hunk or any of the remaining ones a - stage this hunk and all later hunks in the file d - do not stage this hunk or any of the later hunks in the file g - select a hunk to go to / - search for a hunk matching the given regex j - leave this hunk undecided, see next undecided hunk J - leave this hunk undecided, see next hunk k - leave this hunk undecided, see previous undecided hunk K - leave this hunk undecided, see previous hunk s - split the current hunk into smaller hunks e - manually edit the current hunk ? - print help 通常只會用到s, y, n y 就是 yes，要 add 這個 hunk n 就是 no，不要 add 這個 hunk s 把目前的 hunk 再切成更小的 hunk more detail about git add -p can click this url \r\r ","date":"2021-08-01","objectID":"/git_command/:3:0","tags":["git","tool"],"title":"Git Commands","uri":"/git_command/"},{"categories":["Git"],"content":"git commit Record changes to the repository\r\r 記錄Stage(暫存區)的狀態到Repository(倉儲) git commit -m \"savepoint\" 若需要修改最後一次的 commit git commit --amend \r\r ","date":"2021-08-01","objectID":"/git_command/:4:0","tags":["git","tool"],"title":"Git Commands","uri":"/git_command/"},{"categories":["Git"],"content":"git log Show commit logs\r\r 顯示版本控制的歷史記錄(commit record) 小寫q退出 簡化版面 git log --pretty=oneline git log --graph --pretty=format:\"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u003c%an\u003e%Creset\" --abbrev-commit --date=relative \r\r ","date":"2021-08-01","objectID":"/git_command/:5:0","tags":["git","tool"],"title":"Git Commands","uri":"/git_command/"},{"categories":["Git"],"content":"git reset Reset current HEAD to the specified state\r\r 回退版本 reset 可以理解為 go to 三個參數--mixed, --soft, --hard, 預設為--mixed # 前往兩個 Commit 之前的狀態 git reset HEAD~2 more detail about git reset can click this url \r\r ","date":"2021-08-01","objectID":"/git_command/:6:0","tags":["git","tool"],"title":"Git Commands","uri":"/git_command/"},{"categories":["Git"],"content":"git checkout Switch branches or restore working tree files\r\r 用於切換分支或者恢復工作樹的檔案 # switch branches git checkout branchName # restore working tree files git checkout -- \u003cfilename\u003e # 檔案會回到最近一次 git commit 或 git add 時的狀態。 \r\r ","date":"2021-08-01","objectID":"/git_command/:7:0","tags":["git","tool"],"title":"Git Commands","uri":"/git_command/"},{"categories":["Git"],"content":"git push Update remote refs along with associated objects\r\r \r\r ","date":"2021-08-01","objectID":"/git_command/:8:0","tags":["git","tool"],"title":"Git Commands","uri":"/git_command/"},{"categories":["Git"],"content":"git pull Fetch from and integrate with another repository or a local branch\r\r \r\r ","date":"2021-08-01","objectID":"/git_command/:9:0","tags":["git","tool"],"title":"Git Commands","uri":"/git_command/"},{"categories":["Git"],"content":"An introduction to Git","date":"2021-08-01","objectID":"/git_intro/","tags":["git","tool"],"title":"Introduction Git","uri":"/git_intro/"},{"categories":["Git"],"content":"Note\r\rA software system that records changes to a file or set of files over time so that you can recall specific versions later. Git can track the changes you make to files, so you have a record of what has been done, and you can revert to specific versions should you ever need to.\r\r  ","date":"2021-08-01","objectID":"/git_intro/:0:0","tags":["git","tool"],"title":"Introduction Git","uri":"/git_intro/"},{"categories":["Git"],"content":"0. Before start Github, Gitlab ? Cloud services for remote hosting of git repositories. In addition to hosting your code, the site helps manage software development projects with features like issue tracking, collaborating with other GitHub users, and hosting web pages. ","date":"2021-08-01","objectID":"/git_intro/:1:0","tags":["git","tool"],"title":"Introduction Git","uri":"/git_intro/"},{"categories":["Git"],"content":"1. Installation Official website : https://git-scm.com/ ","date":"2021-08-01","objectID":"/git_intro/:2:0","tags":["git","tool"],"title":"Introduction Git","uri":"/git_intro/"},{"categories":["Git"],"content":"Windows Go to the offical website and download the .exe installation file for windows.\\ Using scoop (Windows command line package management tool) scoop install git  ","date":"2021-08-01","objectID":"/git_intro/:2:1","tags":["git","tool"],"title":"Introduction Git","uri":"/git_intro/"},{"categories":["Git"],"content":"Linux (Ubuntu) # (recommend) only includes main components with minimal dependencies sudo apt-get install git # contains all sub-packages sudo apt-get install git-all ","date":"2021-08-01","objectID":"/git_intro/:2:2","tags":["git","tool"],"title":"Introduction Git","uri":"/git_intro/"},{"categories":["Git"],"content":"Settings The first thing you should do when you install Git is to set your user name and email address. This is important because every Git commit uses this information. git config --global user.name \"Username\" git config --global user.email Username@example.com 若你有傳遞--global參數，只需要做這工作一次，此後在你安裝使用的系統上，不論 Git 做任何事都會採用此資訊。 若你想指定不同的名字或電子郵件給特定的專案，只需要在該專案目錄內執行此命令，並確定未加上--global參數。 Check settings git config --list [output] user.name=vic user.email=vic@example.com color.status=auto color.branch=auto color.interactive=auto color.diff=auto ... [end output] # or maybe use: git config \u003ckey\u003e git config --global user.name vic git config --global user.email vic@example.com Git的設定會被記錄在gitconfig檔案中，這些參數被存放在下列三個地方 檔案 /etc/gitconfig：裡面包含該系統所有使用者和使用者倉儲的預設設定。 如果你傳遞--system參數給git config，它就會明確地從這個檔案讀取或寫入設定。 檔案 ~/.gitconfig、~/.config/git/config：你的帳號專用的設定。只要你傳遞 --global，就會明確地讓 Git 從這個檔案讀取或寫入設定 任何倉儲中 Git 資料夾的 config 檔案（位於 .git/config）：這個倉儲的專用設定。 每個層級的設定皆覆蓋先前的設定，所以在.git/config 的設定優先權高於在 /etc/gitconfig裡的設定。 在 Windows 系統，Git 會在$HOME目錄（對大部份使用者來說是 C:\\Users\\$USER）內尋找.gitconfig  ","date":"2021-08-01","objectID":"/git_intro/:3:0","tags":["git","tool"],"title":"Introduction Git","uri":"/git_intro/"},{"categories":["Git"],"content":"Help If you ever need help while using Git, there are three equivalent ways to get the comprehensive manual page (manpage) help for any of the Git commands: git help \u003cverb\u003e git \u003cverb\u003e --help man git-\u003cverb\u003e # ex. git help config ","date":"2021-08-01","objectID":"/git_intro/:3:1","tags":["git","tool"],"title":"Introduction Git","uri":"/git_intro/"},{"categories":["Git"],"content":"Basics ","date":"2021-08-01","objectID":"/git_intro/:4:0","tags":["git","tool"],"title":"Introduction Git","uri":"/git_intro/"},{"categories":["Git"],"content":"The lifecycle of the status of your files Remember that each file in your working directory can be in one of two states: tracked or untracked. Tracked files are files that were in the last snapshot, as well as any newly staged files; they can be unmodified, modified, or staged. In short, tracked files are files that Git knows about. Untracked files are everything else — any files in your working directory that were not in your last snapshot and are not in your staging area. When you first clone a repository, all of your files will be tracked and unmodified because Git just checked them out and you haven’t edited anything. As you edit files, Git sees them as modified, because you’ve changed them since your last commit. As you work, you selectively stage these modified files and then commit all those staged changes, and the cycle repeats.    ","date":"2021-08-01","objectID":"/git_intro/:4:1","tags":["git","tool"],"title":"Introduction Git","uri":"/git_intro/"},{"categories":["Git"],"content":"Initializing a Repository in an Existing Directory you can using the git status command to determine which files are in which state If you have a project directory that is currently not under version control and you want to start controlling it with Git, you first need to go to that project’s directory and type: git init This creates a new subdirectory named .git that contains all of your necessary repository files You can accomplish that with a few git addcommands that specify the files you want to track, followed by a git commit: git add -A # track all files inside the folder git commit -m \"msg\" # save a checkpoint with a message \"msg\" ","date":"2021-08-01","objectID":"/git_intro/:4:2","tags":["git","tool"],"title":"Introduction Git","uri":"/git_intro/"},{"categories":["Git"],"content":"Reference https://git-scm.com/doc ","date":"2021-08-01","objectID":"/git_intro/:5:0","tags":["git","tool"],"title":"Introduction Git","uri":"/git_intro/"},{"categories":null,"content":"A 24-year-old male GICE master student. ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"About LoveIt","uri":"/about/"}]